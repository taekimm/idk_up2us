import { Component, OnInit } from '@angular/core';
import { MapsService } from '../maps.service';
import { YelpService } from '../yelp.service';

declare var google: any;

@Component({
  selector: 'app-landing',
  templateUrl: './landing.component.html',
  styleUrls: ['./landing.component.css']
})
export class LandingComponent implements OnInit {
	// Yelp Search variables
	newSearch = {
		radius: 0,
		lat: 0,
		long: 0,
		categories: '',
		limit: 20,
		price: '',
	}

	// variable for radius to search in MILES
	// yelp && google maps takes it in meters only
	searchRadiusInMiles = 1

	searched=false;

	myVar=true;

	// booleans to hold price inputs
	price1 = true;
	price2 = true;
	price3 = false;
	price4 = false;

	// Coordinates from location service
	coordinates;

	// variable to hold marker for person
	personMarker;

	// Map to hold map generated by GoogleMaps in order to add rest. markers after pick
	googleMap;

	// google maps radius circle object
	radiusCircle;

	// Results from Yelp Search
	YelpList: Array<any> = [];
	businessList: Array<any> = [];
	pick;
	
	
	constructor(
		private _yelpService: YelpService,
		private _mapsService: MapsService
	) { }
	
	ngOnInit() {
		this._mapsService.getCoordinates()
			.then( position => {
				
				// setting coordinates objects above to results from geolocation
				this.coordinates = position;
				// setting newSearch variable's lat & long values to co
				this.newSearch.lat = this.coordinates.coords.latitude;
				this.newSearch.long = this.coordinates.coords.longitude;

				//map options
				var mapOptions = {
					zoom: 15,
					mapTypeId: google.maps.MapTypeId.ROADMAP
				};

				//generating map
				var map = new google.maps.Map(document.getElementById('googleMap'), mapOptions);
				this.googleMap = map;
				
				// geolocate position
				var positionForMarker = new google.maps.LatLng(this.coordinates.coords.latitude, this.coordinates.coords.longitude)

				// marker based off geolocate position
				var marker = new google.maps.Marker({
					map: map,
					position: positionForMarker,
					animation: google.maps.Animation.BOUNCE
				});

				// setting personMarker to google maps marker for current location
				this.personMarker = marker;

				map.setCenter(positionForMarker)

				// create radius around person
				var circle = new google.maps.Circle({
					map: map,
					radius: this.searchRadiusInMiles * 1609.34,
					fillColor: '#AA0000'
				});
				circle.bindTo('center', marker, 'position');
				this.radiusCircle = circle;
				map.fitBounds(circle.getBounds());
			})
			.catch()
	}

	radiusChange(event) {
		this.radiusCircle.setRadius(this.searchRadiusInMiles * 1609.34);
		this.googleMap.fitBounds(this.radiusCircle.getBounds());
	}

	search(){
		this.searched=true;

		// resetting below variables
		if (this.pick){
			this.pick.setMap(null)
		}
		if (this.YelpList) {
			this.YelpList = [];
		}
		if (this.businessList) {
			this.businessList = [];
		}

		// to convert to meters
		this.newSearch.radius = Math.floor(this.searchRadiusInMiles * 1609.34)
		
		// set max meters radius to 40,000
		if(this.newSearch.radius > 40000 ){
			this.newSearch.radius = 40000
		}

		// adding price search options to newSearch.price string
		if (this.price1 == true) {
			this.newSearch.price += "1";
		}
		if (this.price2 == true && this.newSearch.price == '') {
			this.newSearch.price += "2";
		} else if (this.price2 == true) {
			this.newSearch.price += ",2"
		}
		if (this.price3 == true && this.newSearch.price == '') {
			this.newSearch.price += "3";
		} else if (this.price3 == true) {
			this.newSearch.price += ",3"
		}
		if (this.price4 == true && this.newSearch.price == '') {
			this.newSearch.price += "4";
		} else if (this.price4 == true) {
			this.newSearch.price += ",4"
		}

		// calls Yelp API with newSearch object
		this._yelpService.getRestaurants(this.newSearch)	
		.then( response => {
			// push each rest. from response into YelpList array
			for (let i = 0; i < response.jsonBody.businesses.length; i++){
				this.YelpList.push(response.jsonBody.businesses[i])
			}

			// shuffle list of rests.
			this.YelpList = shuffle(this.YelpList)

			// array to hold all markers for yelp listings
			let businessMarkers = [];
					
			for (let i = 0; i < this.YelpList.length; i++){
						
				var LatLng = {lat: this.YelpList[i].coordinates.latitude, lng: this.YelpList[i].coordinates.longitude}
			
				var testmarker = new google.maps.Marker({
					// to 
					map: this.googleMap,
					position: LatLng,
					icon: '../assets/static/images/restaurant_logo.png',
					animation: google.maps.Animation.BOUNCE
				});

				businessMarkers.push(testmarker)
			}
				
				// setting selected rest. (always last in the array)
				// b/c array is shuffled prior to pick, this pick will always be randomized
				this.pick = businessMarkers[businessMarkers.length-1]

			for (let j = 0; j < businessMarkers.length; j++) {
				if( j < businessMarkers.length-1){
						setTimeout( () => {
							businessMarkers[j].setMap(null)
							this.YelpList.splice(this.YelpList[j], 1)
						}, 3000 + (j * 500));
					}
					else {
						setTimeout( () => {
							this.pick.setAnimation(null)
						}, 3000 + ((j-1) * 500));
					}
			}
				
				// shuffle function
				// function scoped to getRestaurants method
			function shuffle(arr) {
					var m = arr.length, t, i;
					while (m) {
						i = Math.floor(Math.random() * m--);
						t = arr[m];
						arr[m] = arr[i];
						arr[i] = t
					}
					return arr
			}
		})

		// errors
		.catch( err => {
				console.log(err);
		})
	}

	pick_again(){
		// resetting variables
		this.searched=false;
		this.newSearch.radius = 0;
		this.newSearch.categories = '';
		this.newSearch.limit = 20;
		this.newSearch.price = '';
	}
	
}
